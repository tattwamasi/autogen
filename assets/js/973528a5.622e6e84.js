"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4977],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=c(n),d=r,h=g["".concat(o,".").concat(d)]||g[d]||u[d]||i;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=g;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var c=2;c<i;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2794:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_label:"gpt_assistant_agent",title:"agentchat.contrib.gpt_assistant_agent"},s=void 0,l={unversionedId:"reference/agentchat/contrib/gpt_assistant_agent",id:"reference/agentchat/contrib/gpt_assistant_agent",isDocsHomePage:!1,title:"agentchat.contrib.gpt_assistant_agent",description:"GPTAssistantAgent Objects",source:"@site/docs/reference/agentchat/contrib/gpt_assistant_agent.md",sourceDirName:"reference/agentchat/contrib",slug:"/reference/agentchat/contrib/gpt_assistant_agent",permalink:"/autogen/docs/reference/agentchat/contrib/gpt_assistant_agent",editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/agentchat/contrib/gpt_assistant_agent.md",tags:[],version:"current",frontMatter:{sidebar_label:"gpt_assistant_agent",title:"agentchat.contrib.gpt_assistant_agent"},sidebar:"referenceSideBar",previous:{title:"compressible_agent",permalink:"/autogen/docs/reference/agentchat/contrib/compressible_agent"},next:{title:"llava_agent",permalink:"/autogen/docs/reference/agentchat/contrib/llava_agent"}},o=[{value:"GPTAssistantAgent Objects",id:"gptassistantagent-objects",children:[{value:"__init__",id:"__init__",children:[],level:4},{value:"can_execute_function",id:"can_execute_function",children:[],level:4},{value:"reset",id:"reset",children:[],level:4},{value:"clear_history",id:"clear_history",children:[],level:4},{value:"pretty_print_thread",id:"pretty_print_thread",children:[],level:4},{value:"oai_threads",id:"oai_threads",children:[],level:4}],level:2}],c={toc:o};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"gptassistantagent-objects"},"GPTAssistantAgent Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class GPTAssistantAgent(ConversableAgent)\n")),(0,r.kt)("p",null,"An experimental AutoGen agent class that leverages the OpenAI Assistant API for conversational capabilities.\nThis agent is unique in its reliance on the OpenAI Assistant for state management, differing from other agents like ConversableAgent."),(0,r.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def __init__(name="GPT Assistant",\n             instructions: Optional[str] = "You are a helpful GPT Assistant.",\n             llm_config: Optional[Union[Dict, bool]] = None)\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," ",(0,r.kt)("em",{parentName:"li"},"str")," - name of the agent."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"instructions")," ",(0,r.kt)("em",{parentName:"li"},"str")," - instructions for the OpenAI assistant configuration."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"llm_config")," ",(0,r.kt)("em",{parentName:"li"},"dict or False")," - llm inference configuration.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"model: Model to use for the assistant (gpt-4-1106-preview, gpt-3.5-turbo-1106)."),(0,r.kt)("li",{parentName:"ul"},"check_every_ms: check thread run status interval"),(0,r.kt)("li",{parentName:"ul"},"tools: Give Assistants access to OpenAI-hosted tools like Code Interpreter and Knowledge Retrieval,\nor build your own tools using Function calling. ref ",(0,r.kt)("a",{parentName:"li",href:"https://platform.openai.com/docs/assistants/tools"},"https://platform.openai.com/docs/assistants/tools")),(0,r.kt)("li",{parentName:"ul"},"file_ids: files used by retrieval in run")))),(0,r.kt)("h4",{id:"can_execute_function"},"can","_","execute","_","function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def can_execute_function(name: str) -> bool\n")),(0,r.kt)("p",null,"Whether the agent can execute the function."),(0,r.kt)("h4",{id:"reset"},"reset"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def reset()\n")),(0,r.kt)("p",null,"Resets the agent, clearing any existing conversation thread and unread message indices."),(0,r.kt)("h4",{id:"clear_history"},"clear","_","history"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def clear_history(agent: Optional[Agent] = None)\n")),(0,r.kt)("p",null,"Clear the chat history of the agent."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"agent")," - the agent with whom the chat history to clear. If None, clear the chat history with all agents.")),(0,r.kt)("h4",{id:"pretty_print_thread"},"pretty","_","print","_","thread"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def pretty_print_thread(thread)\n")),(0,r.kt)("p",null,"Pretty print the thread."),(0,r.kt)("h4",{id:"oai_threads"},"oai","_","threads"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef oai_threads() -> Dict[Agent, Any]\n")),(0,r.kt)("p",null,"Return the threads of the agent."))}p.isMDXComponent=!0}}]);